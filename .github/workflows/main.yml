name: RDP

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */5 * * *" # optional: restart every 6 hours automatically

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600  # 60 hours max (3600 minutes)

    steps:
      - name: üß∞ Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" > $null 2>&1
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: üë§ Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
            Remove-LocalUser -Name "RDP"
          }

          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          echo "RDP_USERNAME=RDP" >> $env:GITHUB_ENV

      - name: üåê Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: üîë Connect to Tailscale (Auto Reconnect)
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tsPath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          & $tsPath logout > $null 2>&1
          & $tsPath up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID --ssh --accept-dns=true --accept-routes=true
          
          # Wait for IP
          $tsIP = $null
          $retry = 0
          while (-not $tsIP -and $retry -lt 10) {
              $tsIP = & $tsPath ip -4
              if (-not $tsIP) { Start-Sleep 5; $retry++ }
          }
          if (-not $tsIP) { Write-Error "No Tailscale IP assigned!"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: ‚úÖ Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $test.TcpTestSucceeded) { Write-Error "RDP Port check failed!"; exit 1 }
          Write-Host "‚úÖ RDP Port open and reachable."

      - name: üñ•Ô∏è Maintain Connection (Keep Alive)
        run: |
          Write-Host "`n=== RDP ACCESS INFO ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USERNAME"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "========================"
          while ($true) {
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP Active - Use Ctrl+C in workflow to stop"
              Start-Sleep -Seconds 300
          }
        shell: pwsh
